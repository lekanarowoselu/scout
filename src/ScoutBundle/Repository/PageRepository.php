<?php

namespace ScoutBundle\Repository;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param $searchTerms
     * @return mixed
     */
    public function search($searchTerms)
    {
        /*return $this->createQueryBuilder('a')
        ->where('a.title LIKE :searchTerm OR a.metaTitle LIKE :searchTerm OR a.metaDescription LIKE :searchTerm OR a.content LIKE :searchTerm')
        ->setParameter('searchTerm', '%'.$searchTerm.'%')
        ->getQuery()
        ->execute();*/

        $qb = $this->createQueryBuilder('c');

        for ($i = 0; $i < count($searchTerms); $i++) {
            $term = $searchTerms[$i];
            if(!empty($term)){
                $qb->orWhere($qb->expr()->like('c.title', "?$i"));
                $qb->orWhere($qb->expr()->like('c.content', "?$i"));
                $qb->setParameter($i, '%' . $term . '%');
            }
        }

        return $qb->getQuery()->execute();
    }

    public function findPageWithoutCategories($locale){
        return $this->createQueryBuilder('p')
            ->join("p.lang","l")
            ->where("l.locale = :locale")
            ->andWhere("p.category IS NULL")
            ->setParameter("locale",$locale)
            ->getQuery()
            ->getResult();
    }


    public function getNewsArchiveMenu($category)
    {
        return $this->createQueryBuilder('p')->select('p.createdAt AS ArchiveDate')
            ->where('p.category = :category')
            ->setParameter('category', $category)
            ->groupBy('ArchiveDate')
            ->getQuery()->getResult();
    }

    public function getNewsArchive($category, $fromdate, $todate )
    {
        $qb = $this->createQueryBuilder('p');
        return $qb->select('p')
            ->where('p.category = :category')
            ->andWhere($qb->expr()->between('p.createdAt', ':fromdate', ':todate'))
            ->setParameter('category', $category)
            ->setParameter('fromdate', $fromdate, \Doctrine\DBAL\Types\Type::DATETIME)
            ->setParameter('todate', $todate, \Doctrine\DBAL\Types\Type::DATETIME)
            ->orderBy("p.createdAt","DESC")
            ->getQuery()->getResult();
    }

//    public function findOneBySlug($locale,$slug){
//        $qb = $this->createQueryBuilder('p');
//        return $qb->addSelect("c")
//            ->addSelect("d")
//            ->leftJoin("p.documents","d")
//            ->join("p.category","c")
//            ->join("p.lang","l")
//            ->where("p.slug = :slug")
//            ->andWhere("l.locale = :locale")
//            ->setParameter("locale",$locale)
//            ->setParameter("slug",$slug)
//            ->setMaxResults(1)
//            ->getQuery()->getSingleResult();
//    }

    public function findLatestNews($locale, $newsTitle){
        $qb = $this->createQueryBuilder('p');
        return $qb->addSelect("c")
            ->join("p.category","c")
            ->join("p.lang","l")
            ->where("c.title = :newsTitle")
            ->andWhere("l.locale = :locale")
            ->setParameter("locale",$locale)
            ->setParameter("newsTitle",$newsTitle)
            ->setMaxResults(1)
            ->orderBy("p.createdAt","ASC")
            ->getQuery()->getSingleResult();
    }

    public function findOneByTitle($locale,$title){
        $qb = $this->createQueryBuilder('p');
        return $qb->addSelect("c")
            ->join("p.category","c")
            ->join("p.lang","l")
            ->where("p.title = :title")
            ->andWhere("l.locale = :locale")
            ->setParameter("locale",$locale)
            ->setParameter("title",$title)
            ->setMaxResults(1)
            ->getQuery()->getSingleResult();
    }

    public function getAllSpecial($locale){
        $qb = $this->createQueryBuilder('p');
        return $qb->join("p.lang","l")
            ->where($qb->expr()->isNotNull("p.special"))
            ->andWhere('l.locale = :locale')
            ->setParameter("locale",$locale)
            ->getQuery()->getResult();
    }



    public function findLatestByCategory($category,$limit = 6){
        $qb = $this->createQueryBuilder('p');
        return $qb->where('p.category = :category')
            ->setParameter('category', $category)
            ->setMaxResults($limit)
            ->getQuery()->getResult();
    }

    public function searchFront($locale,$keyword){
        $qb = $this->createQueryBuilder('p');

        $column = $qb->expr()->orX();
        $column->add($qb->expr()->like('p.title', ":keyword"));
        $column->add($qb->expr()->like('p.metaTitle', ":keyword"));
        $column->add($qb->expr()->like('p.metaDescription', ":keyword"));
        $column->add($qb->expr()->like('p.content', ":keyword"));
        $column->add($qb->expr()->like('p.subtitle', ":keyword"));
        $column->add($qb->expr()->like('p.pageName', ":keyword"));

        return $qb->join("p.lang","l")
            ->where("l.locale = :locale")
            ->andWhere($column)
            ->setParameter("locale",$locale)
            ->setParameter("keyword","%".$keyword."%")
            ->getQuery()->getResult();
    }

//IN-USE//

    public function findOneBySlug($slug){
        $qb = $this->createQueryBuilder('p');
        return $qb->addSelect("c")
//            ->addSelect("d")
//            ->leftJoin("p.banner","d")
            ->leftJoin("p.pageCategory","c")
            ->where("p.slug = :slug")
            ->setParameter("slug",$slug)
            ->setMaxResults(1)
            ->getQuery()->getSingleResult();
    }

    public function findOneByPageName($slug, $_locale){
        return $this->createQueryBuilder('p')
            ->join("p.lang","l")
            ->where("p.pageName = :slug")
            ->andWhere("l.locale = :locale")
            ->setParameter("locale",$_locale)
            ->setParameter("slug",$slug)
            ->setMaxResults(1)
            ->getQuery()->getSingleResult();



    }
    public function findByCategoryName($locale,$category_name,$limit = 14){
        $qb = $this->createQueryBuilder('p');
        return $qb->addSelect("l")
            ->addSelect("c")
            ->join("p.lang","l")
            ->join("p.pageCategory","c")
            ->where("l.locale = :locale")
            ->andWhere("c.title = :title")
            ->setParameter("locale",$locale)
            ->setParameter("title",$category_name)
            ->setMaxResults($limit)
            ->orderBy("p.createdAt","DESC")
            ->getQuery()->getResult();
    }

    public function findByLang($locale)
    {
        return $this->createQueryBuilder('p')
            ->join("p.lang","l")
            ->where("l.locale = :locale")
            ->setParameter("locale",$locale)
            ->getQuery()
            ->getResult();

    }


}
